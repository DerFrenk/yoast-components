// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SnippetEditor accepts a custom data mapping function 1`] = `
<div>
  <section>
    <div
      className="jDjROD"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="kEjIkz"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="jrzbNu"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="kfHzhC"
          >
            <span
              className="iOHwuu"
            >
              Totally different title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="fFcmtz"
        >
          <div
            className="kvZFvD"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            example.org â€º totally-different-url
          </div>
        </div>
      </div>
      <hr
        className="hKmbcw"
      />
      <div
        className="kEjIkz"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="iupvCD"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="iupvCD"
          >
            Totally different description
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="beFLGL"
  >
    <button
      aria-pressed={true}
      className="jSeHja"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile fcCOou"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="jINwGl"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop ftopRi"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="evttQb"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit bYFdEI"
      fill="currentColor"
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    Edit snippet
  </button>
</div>
`;

exports[`SnippetEditor activates a field on onMouseUp() and opens the editor 1`] = `
<ErrorBoundary>
  <div>
    <SnippetPreview
      activeField={null}
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField={null}
      isAmp={false}
      keyword=""
      locale="en"
      mode="mobile"
      onHover={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      title="Test title"
      url="example.org/test-slug"
      wordsToHighlight={Array []}
    />
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    />
    <SnippetEditor__EditSnippetButton
      activeBackgroundColor="#f7f7f7"
      activeBorderColor="#888"
      activeColor="#000"
      aria-expanded={true}
      backgroundColor="#f7f7f7"
      borderColor="#ccc"
      boxShadowColor="#ccc"
      focusBackgroundColor="#fff"
      focusBorderColor="#0066cd"
      focusColor="#000"
      hoverBackgroundColor="#fff"
      hoverBorderColor="#888"
      hoverColor="#000"
      onClick={[Function]}
      textColor="#555"
      type="button"
    >
      <SvgIcon
        color="currentColor"
        icon="edit"
        size="16px"
      />
      Edit snippet
    </SnippetEditor__EditSnippetButton>
    <SnippetEditorFields
      activeField={null}
      containerPadding="0 20px"
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
      descriptionLengthProgress={
        Object {
          "actual": 42,
          "max": 156,
          "score": 6,
        }
      }
      hoveredField={null}
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      recommendedReplacementVariables={Array []}
      replacementVariables={Array []}
      titleLengthProgress={
        Object {
          "actual": 0,
          "max": 600,
          "score": 1,
        }
      }
    />
    <SnippetEditor__CloseEditorButton
      activeBackgroundColor="#f7f7f7"
      activeBorderColor="#888"
      activeColor="#000"
      backgroundColor="#f7f7f7"
      borderColor="#ccc"
      boxShadowColor="#ccc"
      focusBackgroundColor="#fff"
      focusBorderColor="#0066cd"
      focusColor="#000"
      hoverBackgroundColor="#fff"
      hoverBorderColor="#888"
      hoverColor="#000"
      onClick={[Function]}
      textColor="#555"
      type="button"
    >
      Close snippet editor
    </SnippetEditor__CloseEditorButton>
  </div>
</ErrorBoundary>
`;

exports[`SnippetEditor calls callbacks when the editors are focused or changed 1`] = `
<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-groBij",
                    "isStatic": true,
                    "lastClassName": "jDjROD",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-groBij",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="jDjROD"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-FQttp",
                                "isStatic": true,
                                "lastClassName": "jrzbNu",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-FQttp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="jrzbNu"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-hJOjYk",
                                      "isStatic": true,
                                      "lastClassName": "kfHzhC",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-bmYqlg",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-hJOjYk",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="kfHzhC"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                            "isStatic": true,
                                            "lastClassName": "iOHwuu",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="iOHwuu"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-hpEpbp",
                                "isStatic": true,
                                "lastClassName": "fFcmtz",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-hpEpbp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="fFcmtz"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                      "isStatic": true,
                                      "lastClassName": "kvZFvD",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-hpEpbp",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="kvZFvD"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-gaTdmv",
                          "isStatic": true,
                          "lastClassName": "hKmbcw",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-gaTdmv",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="hKmbcw"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-isptHr",
                                "isStatic": false,
                                "lastClassName": "iupvCD",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-cXRtpD",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="iupvCD"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-isptHr",
                                      "isStatic": false,
                                      "lastClassName": "iupvCD",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-cXRtpD",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="iupvCD"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-cUFsVs",
                  "isStatic": true,
                  "lastClassName": "beFLGL",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-cUFsVs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="beFLGL"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-hAxSQH",
                        "isStatic": false,
                        "lastClassName": "jSeHja",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-hAxSQH",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="jSeHja"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-iKiwdK",
                                "isStatic": false,
                                "lastClassName": "fyghDw",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-iKiwdK",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile fyghDw"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-kMJDzg",
                        "isStatic": false,
                        "lastClassName": "jINwGl",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-kMJDzg",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="jINwGl"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-iBUSEi",
                                "isStatic": false,
                                "lastClassName": "iqYYbs",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-iBUSEi",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop iqYYbs"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-YkMrD",
                "isStatic": false,
                "lastClassName": "evttQb",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-YkMrD",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="evttQb"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-dOfVKB",
                        "isStatic": false,
                        "lastClassName": "dlbgfL",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-dOfVKB",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit dlbgfL"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <Shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Shared__StyledEditor-kZtWdr",
                  "isStatic": false,
                  "lastClassName": "gqaeOM",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "Shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Shared__StyledEditor-kZtWdr",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="gqaeOM"
            >
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="20"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="20"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="20"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-kpUjxG",
                                        "isStatic": false,
                                        "lastClassName": "ipqdvx",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-kpUjxG",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle ipqdvx"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-ewxRtG",
                                "isStatic": false,
                                "lastClassName": "kSXboc",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__TitleInputContainer-hcRtNW",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-ewxRtG",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="ejHsjh"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="20"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="20"
                                content="Test title"
                                fieldId="snippet-editor-field-title"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="kjtizr"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <Shared__SimulatedLabel
                      id="snippet-editor-field-19-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared__SimulatedLabel-elvnSu",
                              "isStatic": true,
                              "lastClassName": "foGqCa",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "Shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-19-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="foGqCa"
                          id="snippet-editor-field-19-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </Shared__SimulatedLabel>
                    <Shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared-dHeidu",
                              "isStatic": false,
                              "lastClassName": "epibFs",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "Shared",
                            "foldedComponentIds": Array [
                              "Shared__InputContainer-hvjUjD",
                            ],
                            "render": [Function],
                            "styledComponentId": "Shared-dHeidu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="epibFs"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-19-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-19-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-tgqqu",
                                    "isStatic": true,
                                    "lastClassName": "etLKkJ",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-tgqqu",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-19-slug"
                                className="etLKkJ"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </Shared>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="21"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="21"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="21"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-gyYEyf",
                                        "isStatic": false,
                                        "lastClassName": "hAuKRd",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-gyYEyf",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle hAuKRd"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-gflbDE",
                                "isStatic": false,
                                "lastClassName": "lntgvu",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__DescriptionInputContainer-ieDADT",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-gflbDE",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="lntgvu"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="21"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="21"
                                content="Test description, %%replacement_variable%%"
                                fieldId="snippet-editor-field-description"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                placeholder="Modify your meta description by editing it right here"
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="csUbTj"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
            </section>
          </StyledComponent>
        </Shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-buRiHn",
                "isStatic": false,
                "lastClassName": "fBceur",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-buRiHn",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="fBceur"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor calls callbacks when the editors are focused or changed 2`] = `
<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-groBij",
                    "isStatic": true,
                    "lastClassName": "jDjROD",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-groBij",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="jDjROD"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-FQttp",
                                "isStatic": true,
                                "lastClassName": "jrzbNu",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-FQttp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="jrzbNu"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-hJOjYk",
                                      "isStatic": true,
                                      "lastClassName": "kfHzhC",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-bmYqlg",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-hJOjYk",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="kfHzhC"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                            "isStatic": true,
                                            "lastClassName": "iOHwuu",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="iOHwuu"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-hpEpbp",
                                "isStatic": true,
                                "lastClassName": "fFcmtz",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-hpEpbp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="fFcmtz"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                      "isStatic": true,
                                      "lastClassName": "kvZFvD",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-hpEpbp",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="kvZFvD"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-gaTdmv",
                          "isStatic": true,
                          "lastClassName": "hKmbcw",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-gaTdmv",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="hKmbcw"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-isptHr",
                                "isStatic": false,
                                "lastClassName": "iupvCD",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-cXRtpD",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="iupvCD"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-isptHr",
                                      "isStatic": false,
                                      "lastClassName": "iupvCD",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-cXRtpD",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="iupvCD"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-cUFsVs",
                  "isStatic": true,
                  "lastClassName": "beFLGL",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-cUFsVs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="beFLGL"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-hAxSQH",
                        "isStatic": false,
                        "lastClassName": "jSeHja",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-hAxSQH",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="jSeHja"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-iKiwdK",
                                "isStatic": false,
                                "lastClassName": "fyghDw",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-iKiwdK",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile fyghDw"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-kMJDzg",
                        "isStatic": false,
                        "lastClassName": "jINwGl",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-kMJDzg",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="jINwGl"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-iBUSEi",
                                "isStatic": false,
                                "lastClassName": "iqYYbs",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-iBUSEi",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop iqYYbs"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-YkMrD",
                "isStatic": false,
                "lastClassName": "evttQb",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-YkMrD",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="evttQb"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-dOfVKB",
                        "isStatic": false,
                        "lastClassName": "dlbgfL",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-dOfVKB",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit dlbgfL"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <Shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Shared__StyledEditor-kZtWdr",
                  "isStatic": false,
                  "lastClassName": "gqaeOM",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "Shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Shared__StyledEditor-kZtWdr",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="gqaeOM"
            >
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="20"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="20"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="20"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-kpUjxG",
                                        "isStatic": false,
                                        "lastClassName": "ipqdvx",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-kpUjxG",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle ipqdvx"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-ewxRtG",
                                "isStatic": false,
                                "lastClassName": "ejHsjh",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__TitleInputContainer-hcRtNW",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-ewxRtG",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="ejHsjh"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="20"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="20"
                                content="Test title"
                                fieldId="snippet-editor-field-title"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="kjtizr"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <Shared__SimulatedLabel
                      id="snippet-editor-field-19-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared__SimulatedLabel-elvnSu",
                              "isStatic": true,
                              "lastClassName": "foGqCa",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "Shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-19-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="foGqCa"
                          id="snippet-editor-field-19-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </Shared__SimulatedLabel>
                    <Shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared-dHeidu",
                              "isStatic": false,
                              "lastClassName": "kSkUXR",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "Shared",
                            "foldedComponentIds": Array [
                              "Shared__InputContainer-hvjUjD",
                            ],
                            "render": [Function],
                            "styledComponentId": "Shared-dHeidu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="epibFs"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-19-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-19-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-tgqqu",
                                    "isStatic": true,
                                    "lastClassName": "etLKkJ",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-tgqqu",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-19-slug"
                                className="etLKkJ"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </Shared>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="21"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="21"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="21"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-gyYEyf",
                                        "isStatic": false,
                                        "lastClassName": "hAuKRd",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-gyYEyf",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle hAuKRd"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-gflbDE",
                                "isStatic": false,
                                "lastClassName": "lntgvu",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__DescriptionInputContainer-ieDADT",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-gflbDE",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="lntgvu"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="21"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="21"
                                content="Test description, %%replacement_variable%%"
                                fieldId="snippet-editor-field-description"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                placeholder="Modify your meta description by editing it right here"
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="csUbTj"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
            </section>
          </StyledComponent>
        </Shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-buRiHn",
                "isStatic": false,
                "lastClassName": "fBceur",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-buRiHn",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="fBceur"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor calls callbacks when the editors are focused or changed 3`] = `
<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-groBij",
                    "isStatic": true,
                    "lastClassName": "jDjROD",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-groBij",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="jDjROD"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-FQttp",
                                "isStatic": true,
                                "lastClassName": "jrzbNu",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-FQttp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="jrzbNu"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-hJOjYk",
                                      "isStatic": true,
                                      "lastClassName": "kfHzhC",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-bmYqlg",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-hJOjYk",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="kfHzhC"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                            "isStatic": true,
                                            "lastClassName": "iOHwuu",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="iOHwuu"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-hpEpbp",
                                "isStatic": true,
                                "lastClassName": "fFcmtz",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-hpEpbp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="fFcmtz"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                      "isStatic": true,
                                      "lastClassName": "kvZFvD",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-hpEpbp",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="kvZFvD"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-gaTdmv",
                          "isStatic": true,
                          "lastClassName": "hKmbcw",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-gaTdmv",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="hKmbcw"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-isptHr",
                                "isStatic": false,
                                "lastClassName": "iupvCD",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-cXRtpD",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="iupvCD"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-isptHr",
                                      "isStatic": false,
                                      "lastClassName": "iupvCD",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-cXRtpD",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="iupvCD"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-cUFsVs",
                  "isStatic": true,
                  "lastClassName": "beFLGL",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-cUFsVs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="beFLGL"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-hAxSQH",
                        "isStatic": false,
                        "lastClassName": "jSeHja",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-hAxSQH",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="jSeHja"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-iKiwdK",
                                "isStatic": false,
                                "lastClassName": "fyghDw",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-iKiwdK",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile fyghDw"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-kMJDzg",
                        "isStatic": false,
                        "lastClassName": "jINwGl",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-kMJDzg",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="jINwGl"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-iBUSEi",
                                "isStatic": false,
                                "lastClassName": "iqYYbs",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-iBUSEi",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop iqYYbs"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-YkMrD",
                "isStatic": false,
                "lastClassName": "evttQb",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-YkMrD",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="evttQb"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-dOfVKB",
                        "isStatic": false,
                        "lastClassName": "dlbgfL",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-dOfVKB",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit dlbgfL"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <Shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Shared__StyledEditor-kZtWdr",
                  "isStatic": false,
                  "lastClassName": "gqaeOM",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "Shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Shared__StyledEditor-kZtWdr",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="gqaeOM"
            >
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="20"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="20"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="20"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-kpUjxG",
                                        "isStatic": false,
                                        "lastClassName": "ipqdvx",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-kpUjxG",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle ipqdvx"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-ewxRtG",
                                "isStatic": false,
                                "lastClassName": "ejHsjh",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__TitleInputContainer-hcRtNW",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-ewxRtG",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="ejHsjh"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="20"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="20"
                                content="Test title"
                                fieldId="snippet-editor-field-title"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="kjtizr"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <Shared__SimulatedLabel
                      id="snippet-editor-field-19-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared__SimulatedLabel-elvnSu",
                              "isStatic": true,
                              "lastClassName": "foGqCa",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "Shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-19-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="foGqCa"
                          id="snippet-editor-field-19-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </Shared__SimulatedLabel>
                    <Shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared-dHeidu",
                              "isStatic": false,
                              "lastClassName": "epibFs",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "Shared",
                            "foldedComponentIds": Array [
                              "Shared__InputContainer-hvjUjD",
                            ],
                            "render": [Function],
                            "styledComponentId": "Shared-dHeidu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="epibFs"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-19-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-19-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-tgqqu",
                                    "isStatic": true,
                                    "lastClassName": "etLKkJ",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-tgqqu",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-19-slug"
                                className="etLKkJ"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </Shared>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="21"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="21"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="21"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-gyYEyf",
                                        "isStatic": false,
                                        "lastClassName": "hAuKRd",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-gyYEyf",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle hAuKRd"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-gflbDE",
                                "isStatic": false,
                                "lastClassName": "blZgTr",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__DescriptionInputContainer-ieDADT",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-gflbDE",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="lntgvu"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="21"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="21"
                                content="Test description, %%replacement_variable%%"
                                fieldId="snippet-editor-field-description"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                placeholder="Modify your meta description by editing it right here"
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="csUbTj"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
            </section>
          </StyledComponent>
        </Shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-buRiHn",
                "isStatic": false,
                "lastClassName": "fBceur",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-buRiHn",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="fBceur"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor closes when calling close() 1`] = `
<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-groBij",
                    "isStatic": true,
                    "lastClassName": "jDjROD",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-groBij",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="jDjROD"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-FQttp",
                                "isStatic": true,
                                "lastClassName": "jrzbNu",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-FQttp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="jrzbNu"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-hJOjYk",
                                      "isStatic": true,
                                      "lastClassName": "kfHzhC",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-bmYqlg",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-hJOjYk",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="kfHzhC"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                            "isStatic": true,
                                            "lastClassName": "iOHwuu",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="iOHwuu"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-hpEpbp",
                                "isStatic": true,
                                "lastClassName": "fFcmtz",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-hpEpbp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="fFcmtz"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                      "isStatic": true,
                                      "lastClassName": "kvZFvD",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-hpEpbp",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="kvZFvD"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-gaTdmv",
                          "isStatic": true,
                          "lastClassName": "hKmbcw",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-gaTdmv",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="hKmbcw"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-isptHr",
                                "isStatic": false,
                                "lastClassName": "iupvCD",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-cXRtpD",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="iupvCD"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-isptHr",
                                      "isStatic": false,
                                      "lastClassName": "iupvCD",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-cXRtpD",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="iupvCD"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-cUFsVs",
                  "isStatic": true,
                  "lastClassName": "beFLGL",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-cUFsVs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="beFLGL"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-hAxSQH",
                        "isStatic": false,
                        "lastClassName": "jSeHja",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-hAxSQH",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="jSeHja"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-iEbEBv",
                                "isStatic": false,
                                "lastClassName": "gqGNus",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-iEbEBv",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile gqGNus"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-kMJDzg",
                        "isStatic": false,
                        "lastClassName": "jINwGl",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-kMJDzg",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="jINwGl"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-kDFFFr",
                                "isStatic": false,
                                "lastClassName": "kEHoKd",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-kDFFFr",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop kEHoKd"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-YkMrD",
                "isStatic": false,
                "lastClassName": "evttQb",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-YkMrD",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="evttQb"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-kqYMtY",
                        "isStatic": false,
                        "lastClassName": "hXoSSg",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-kqYMtY",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit hXoSSg"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <Shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Shared__StyledEditor-kZtWdr",
                  "isStatic": false,
                  "lastClassName": "gqaeOM",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "Shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Shared__StyledEditor-kZtWdr",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="gqaeOM"
            >
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="8"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="8"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="8"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-egJQxd",
                                        "isStatic": false,
                                        "lastClassName": "eLJGzB",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-egJQxd",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle eLJGzB"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-ivcjga",
                                "isStatic": false,
                                "lastClassName": "YJEnP",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__TitleInputContainer-hcRtNW",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-ivcjga",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="jEdCrX"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="8"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="8"
                                content="Test title"
                                fieldId="snippet-editor-field-title"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="kjtizr"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <Shared__SimulatedLabel
                      id="snippet-editor-field-7-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared__SimulatedLabel-elvnSu",
                              "isStatic": true,
                              "lastClassName": "foGqCa",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "Shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-7-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="foGqCa"
                          id="snippet-editor-field-7-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </Shared__SimulatedLabel>
                    <Shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared-dHeidu",
                              "isStatic": false,
                              "lastClassName": "epibFs",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "Shared",
                            "foldedComponentIds": Array [
                              "Shared__InputContainer-hvjUjD",
                            ],
                            "render": [Function],
                            "styledComponentId": "Shared-dHeidu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="epibFs"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-7-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-7-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-tgqqu",
                                    "isStatic": true,
                                    "lastClassName": "etLKkJ",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-tgqqu",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-7-slug"
                                className="etLKkJ"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </Shared>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="9"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="9"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="9"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-dnKbQS",
                                        "isStatic": false,
                                        "lastClassName": "hFABgl",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-dnKbQS",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle hFABgl"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-dPwUVo",
                                "isStatic": false,
                                "lastClassName": "laJAOB",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__DescriptionInputContainer-ieDADT",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-dPwUVo",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="laJAOB"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="9"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="9"
                                content="Test description, %%replacement_variable%%"
                                fieldId="snippet-editor-field-description"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                placeholder="Modify your meta description by editing it right here"
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="csUbTj"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
            </section>
          </StyledComponent>
        </Shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-buRiHn",
                "isStatic": false,
                "lastClassName": "fBceur",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-buRiHn",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="fBceur"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor closes when calling close() 2`] = `
<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-groBij",
                    "isStatic": true,
                    "lastClassName": "jDjROD",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-groBij",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="jDjROD"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-FQttp",
                                "isStatic": true,
                                "lastClassName": "jrzbNu",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-FQttp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="jrzbNu"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-hJOjYk",
                                      "isStatic": true,
                                      "lastClassName": "kfHzhC",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-bmYqlg",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-hJOjYk",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="kfHzhC"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                            "isStatic": true,
                                            "lastClassName": "iOHwuu",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="iOHwuu"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-hpEpbp",
                                "isStatic": true,
                                "lastClassName": "fFcmtz",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-hpEpbp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="fFcmtz"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                      "isStatic": true,
                                      "lastClassName": "kvZFvD",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-hpEpbp",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="kvZFvD"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-gaTdmv",
                          "isStatic": true,
                          "lastClassName": "hKmbcw",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-gaTdmv",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="hKmbcw"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-isptHr",
                                "isStatic": false,
                                "lastClassName": "iupvCD",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-cXRtpD",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="iupvCD"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-isptHr",
                                      "isStatic": false,
                                      "lastClassName": "iupvCD",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-cXRtpD",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="iupvCD"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-cUFsVs",
                  "isStatic": true,
                  "lastClassName": "beFLGL",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-cUFsVs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="beFLGL"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-hAxSQH",
                        "isStatic": false,
                        "lastClassName": "jSeHja",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-hAxSQH",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="jSeHja"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-kTyShS",
                                "isStatic": false,
                                "lastClassName": "jpCvvb",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-kTyShS",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile jpCvvb"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-kMJDzg",
                        "isStatic": false,
                        "lastClassName": "jINwGl",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-kMJDzg",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="jINwGl"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-icdCbF",
                                "isStatic": false,
                                "lastClassName": "cYjDFY",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-icdCbF",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop cYjDFY"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={false}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={false}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-YkMrD",
                "isStatic": false,
                "lastClassName": "evttQb",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-YkMrD",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={false}
            className="evttQb"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-dmmjQT",
                        "isStatic": false,
                        "lastClassName": "cjGUrl",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-dmmjQT",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit cjGUrl"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor colored progress bars can handle a score of 6 1`] = `
<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 361,
      "max": 550,
      "score": 6,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-groBij",
                    "isStatic": true,
                    "lastClassName": "jDjROD",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-groBij",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="jDjROD"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-FQttp",
                                "isStatic": true,
                                "lastClassName": "jrzbNu",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-FQttp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="jrzbNu"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-hJOjYk",
                                      "isStatic": true,
                                      "lastClassName": "kfHzhC",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-bmYqlg",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-hJOjYk",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="kfHzhC"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                            "isStatic": true,
                                            "lastClassName": "iOHwuu",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="iOHwuu"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-hpEpbp",
                                "isStatic": true,
                                "lastClassName": "fFcmtz",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-hpEpbp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="fFcmtz"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                      "isStatic": true,
                                      "lastClassName": "kvZFvD",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-hpEpbp",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="kvZFvD"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-gaTdmv",
                          "isStatic": true,
                          "lastClassName": "hKmbcw",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-gaTdmv",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="hKmbcw"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-isptHr",
                                "isStatic": false,
                                "lastClassName": "iupvCD",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-cXRtpD",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="iupvCD"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-isptHr",
                                      "isStatic": false,
                                      "lastClassName": "iupvCD",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-cXRtpD",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="iupvCD"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-cUFsVs",
                  "isStatic": true,
                  "lastClassName": "beFLGL",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-cUFsVs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="beFLGL"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-hAxSQH",
                        "isStatic": false,
                        "lastClassName": "jSeHja",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-hAxSQH",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="jSeHja"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-giWBmX",
                                "isStatic": false,
                                "lastClassName": "gtPnAt",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-giWBmX",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile gtPnAt"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-kMJDzg",
                        "isStatic": false,
                        "lastClassName": "jINwGl",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-kMJDzg",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="jINwGl"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-fKtsaP",
                                "isStatic": false,
                                "lastClassName": "fsFQeS",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-fKtsaP",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop fsFQeS"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-YkMrD",
                "isStatic": false,
                "lastClassName": "evttQb",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-YkMrD",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="evttQb"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-iakQKY",
                        "isStatic": false,
                        "lastClassName": "exPCfC",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-iakQKY",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit exPCfC"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <Shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Shared__StyledEditor-kZtWdr",
                  "isStatic": false,
                  "lastClassName": "gqaeOM",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "Shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Shared__StyledEditor-kZtWdr",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="gqaeOM"
            >
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="29"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="29"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="29"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-dQXipi",
                                        "isStatic": false,
                                        "lastClassName": "iUrzkO",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-dQXipi",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle iUrzkO"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-bWcalK",
                                "isStatic": false,
                                "lastClassName": "cpjSyD",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__TitleInputContainer-hcRtNW",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-bWcalK",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="cpjSyD"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="29"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="29"
                                content="Test title"
                                fieldId="snippet-editor-field-title"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="kjtizr"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <Shared__SimulatedLabel
                      id="snippet-editor-field-28-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared__SimulatedLabel-elvnSu",
                              "isStatic": true,
                              "lastClassName": "foGqCa",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "Shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-28-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="foGqCa"
                          id="snippet-editor-field-28-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </Shared__SimulatedLabel>
                    <Shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared-dHeidu",
                              "isStatic": false,
                              "lastClassName": "epibFs",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "Shared",
                            "foldedComponentIds": Array [
                              "Shared__InputContainer-hvjUjD",
                            ],
                            "render": [Function],
                            "styledComponentId": "Shared-dHeidu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="epibFs"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-28-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-28-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-tgqqu",
                                    "isStatic": true,
                                    "lastClassName": "etLKkJ",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-tgqqu",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-28-slug"
                                className="etLKkJ"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </Shared>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="30"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="30"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="30"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-bVvYBa",
                                        "isStatic": false,
                                        "lastClassName": "fsanZP",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-bVvYBa",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle fsanZP"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-AiQRm",
                                "isStatic": false,
                                "lastClassName": "ksoOHd",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__DescriptionInputContainer-ieDADT",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-AiQRm",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="ksoOHd"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="30"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="30"
                                content="Test description, %%replacement_variable%%"
                                fieldId="snippet-editor-field-description"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                placeholder="Modify your meta description by editing it right here"
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="csUbTj"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
            </section>
          </StyledComponent>
        </Shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-buRiHn",
                "isStatic": false,
                "lastClassName": "fBceur",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-buRiHn",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="fBceur"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor colored progress bars can handle scores of 3 and 9 1`] = `
<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 330,
      "max": 650,
      "score": 9,
    }
  }
  hasPaperStyle={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 100,
      "max": 550,
      "score": 3,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-groBij",
                    "isStatic": true,
                    "lastClassName": "jDjROD",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-groBij",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="jDjROD"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-FQttp",
                                "isStatic": true,
                                "lastClassName": "jrzbNu",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-FQttp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="jrzbNu"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-hJOjYk",
                                      "isStatic": true,
                                      "lastClassName": "kfHzhC",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-bmYqlg",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-hJOjYk",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="kfHzhC"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                            "isStatic": true,
                                            "lastClassName": "iOHwuu",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="iOHwuu"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-hpEpbp",
                                "isStatic": true,
                                "lastClassName": "fFcmtz",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-hpEpbp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="fFcmtz"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                      "isStatic": true,
                                      "lastClassName": "kvZFvD",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-hpEpbp",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="kvZFvD"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-gaTdmv",
                          "isStatic": true,
                          "lastClassName": "hKmbcw",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-gaTdmv",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="hKmbcw"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-isptHr",
                                "isStatic": false,
                                "lastClassName": "iupvCD",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-cXRtpD",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="iupvCD"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-isptHr",
                                      "isStatic": false,
                                      "lastClassName": "iupvCD",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-cXRtpD",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="iupvCD"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-cUFsVs",
                  "isStatic": true,
                  "lastClassName": "beFLGL",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-cUFsVs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="beFLGL"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-hAxSQH",
                        "isStatic": false,
                        "lastClassName": "jSeHja",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-hAxSQH",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="jSeHja"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-kqtegC",
                                "isStatic": false,
                                "lastClassName": "gsrSHv",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-kqtegC",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile gsrSHv"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-kMJDzg",
                        "isStatic": false,
                        "lastClassName": "jINwGl",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-kMJDzg",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="jINwGl"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-iGIMCK",
                                "isStatic": false,
                                "lastClassName": "eygrtC",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-iGIMCK",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop eygrtC"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-YkMrD",
                "isStatic": false,
                "lastClassName": "evttQb",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-YkMrD",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="evttQb"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-iykbIz",
                        "isStatic": false,
                        "lastClassName": "eZIcgZ",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-iykbIz",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit eZIcgZ"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <Shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Shared__StyledEditor-kZtWdr",
                  "isStatic": false,
                  "lastClassName": "gqaeOM",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "Shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Shared__StyledEditor-kZtWdr",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="gqaeOM"
            >
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="26"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="26"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="26"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-eJQJSk",
                                        "isStatic": false,
                                        "lastClassName": "fWeaBa",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-eJQJSk",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle fWeaBa"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-izVCAk",
                                "isStatic": false,
                                "lastClassName": "gBguBs",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__TitleInputContainer-hcRtNW",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-izVCAk",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="gBguBs"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="26"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="26"
                                content="Test title"
                                fieldId="snippet-editor-field-title"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="kjtizr"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <Shared__SimulatedLabel
                      id="snippet-editor-field-25-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared__SimulatedLabel-elvnSu",
                              "isStatic": true,
                              "lastClassName": "foGqCa",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "Shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-25-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="foGqCa"
                          id="snippet-editor-field-25-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </Shared__SimulatedLabel>
                    <Shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared-dHeidu",
                              "isStatic": false,
                              "lastClassName": "epibFs",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "Shared",
                            "foldedComponentIds": Array [
                              "Shared__InputContainer-hvjUjD",
                            ],
                            "render": [Function],
                            "styledComponentId": "Shared-dHeidu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="epibFs"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-25-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-25-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-tgqqu",
                                    "isStatic": true,
                                    "lastClassName": "etLKkJ",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-tgqqu",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-25-slug"
                                className="etLKkJ"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </Shared>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="27"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="27"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="27"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-fWBixK",
                                        "isStatic": false,
                                        "lastClassName": "sFzoz",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-fWBixK",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle sFzoz"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-lncXlt",
                                "isStatic": false,
                                "lastClassName": "jjoaEC",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__DescriptionInputContainer-ieDADT",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-lncXlt",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="jjoaEC"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="27"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="27"
                                content="Test description, %%replacement_variable%%"
                                fieldId="snippet-editor-field-description"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                placeholder="Modify your meta description by editing it right here"
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="csUbTj"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
            </section>
          </StyledComponent>
        </Shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-buRiHn",
                "isStatic": false,
                "lastClassName": "fBceur",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-buRiHn",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="fBceur"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor highlights a focused field 1`] = `
<div>
  <section>
    <div
      className="jDjROD"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="kEjIkz"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="jrzbNu"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="kfHzhC"
          >
            <span
              className="iOHwuu"
            >
              Test title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="fFcmtz"
        >
          <div
            className="kvZFvD"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            example.org â€º test-slug
          </div>
        </div>
      </div>
      <hr
        className="hKmbcw"
      />
      <div
        className="kEjIkz"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="iupvCD"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="iupvCD"
          >
            Test description, %%replacement_variable%%
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="beFLGL"
  >
    <button
      aria-pressed={true}
      className="jSeHja"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile izKhbF"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="jINwGl"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop gBHlBb"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="evttQb"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit jQnJqk"
      fill="currentColor"
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    Edit snippet
  </button>
</div>
`;

exports[`SnippetEditor highlights a hovered field 1`] = `
<div>
  <section>
    <div
      className="jDjROD"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="kEjIkz"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="jrzbNu"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="kfHzhC"
          >
            <span
              className="iOHwuu"
            >
              Test title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="fFcmtz"
        >
          <div
            className="kvZFvD"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            example.org â€º test-slug
          </div>
        </div>
      </div>
      <hr
        className="hKmbcw"
      />
      <div
        className="kEjIkz"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="iupvCD"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="iupvCD"
          >
            Test description, %%replacement_variable%%
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="beFLGL"
  >
    <button
      aria-pressed={true}
      className="jSeHja"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile ccyaQa"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="jINwGl"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop kRAnoE"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="evttQb"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit euLwwf"
      fill="currentColor"
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    Edit snippet
  </button>
</div>
`;

exports[`SnippetEditor highlights the active ReplacementVariableEditor when calling setFieldFocus 1`] = `
<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField="description"
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-groBij",
                    "isStatic": true,
                    "lastClassName": "jDjROD",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-groBij",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="jDjROD"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-FQttp",
                                "isStatic": true,
                                "lastClassName": "jrzbNu",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-FQttp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="jrzbNu"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-hJOjYk",
                                      "isStatic": true,
                                      "lastClassName": "kfHzhC",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-bmYqlg",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-hJOjYk",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="kfHzhC"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                            "isStatic": true,
                                            "lastClassName": "iOHwuu",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="iOHwuu"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-hpEpbp",
                                "isStatic": true,
                                "lastClassName": "fFcmtz",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-hpEpbp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="fFcmtz"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                      "isStatic": true,
                                      "lastClassName": "kvZFvD",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-hpEpbp",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="kvZFvD"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-gaTdmv",
                          "isStatic": true,
                          "lastClassName": "hKmbcw",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-gaTdmv",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="hKmbcw"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview-iEWKsz",
                                "isStatic": false,
                                "lastClassName": "hbZopW",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                  "&::before{display:block;position:absolute;top:-3px;",
                                  [Function],
                                  ":",
                                  [Function],
                                  ";width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "SnippetPreview",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-cXRtpD",
                                "SnippetPreview__MobileDescription-isptHr",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview-iEWKsz",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="hbZopW"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-isptHr",
                                      "isStatic": false,
                                      "lastClassName": "iupvCD",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-cXRtpD",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="iupvCD"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-cUFsVs",
                  "isStatic": true,
                  "lastClassName": "beFLGL",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-cUFsVs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="beFLGL"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-hAxSQH",
                        "isStatic": false,
                        "lastClassName": "jSeHja",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-hAxSQH",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="jSeHja"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-cnRAZR",
                                "isStatic": false,
                                "lastClassName": "bctTAB",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-cnRAZR",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile bctTAB"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-kMJDzg",
                        "isStatic": false,
                        "lastClassName": "jINwGl",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-kMJDzg",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="jINwGl"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-gFRTiT",
                                "isStatic": false,
                                "lastClassName": "keKDBQ",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-gFRTiT",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop keKDBQ"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-YkMrD",
                "isStatic": false,
                "lastClassName": "evttQb",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-YkMrD",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="evttQb"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-dOhgZD",
                        "isStatic": false,
                        "lastClassName": "kgejwI",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-dOhgZD",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit kgejwI"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField="description"
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <Shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Shared__StyledEditor-kZtWdr",
                  "isStatic": false,
                  "lastClassName": "gqaeOM",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "Shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Shared__StyledEditor-kZtWdr",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="gqaeOM"
            >
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="14"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="14"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="14"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-btKMPX",
                                        "isStatic": false,
                                        "lastClassName": "kGaqoJ",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-btKMPX",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle kGaqoJ"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-lcuzyA",
                                "isStatic": false,
                                "lastClassName": "dLTnOt",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__TitleInputContainer-hcRtNW",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-lcuzyA",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="dLTnOt"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="14"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="14"
                                content="Test title"
                                fieldId="snippet-editor-field-title"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="kjtizr"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <Shared__SimulatedLabel
                      id="snippet-editor-field-13-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared__SimulatedLabel-elvnSu",
                              "isStatic": true,
                              "lastClassName": "foGqCa",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "Shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-13-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="foGqCa"
                          id="snippet-editor-field-13-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </Shared__SimulatedLabel>
                    <Shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared-dHeidu",
                              "isStatic": false,
                              "lastClassName": "epibFs",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "Shared",
                            "foldedComponentIds": Array [
                              "Shared__InputContainer-hvjUjD",
                            ],
                            "render": [Function],
                            "styledComponentId": "Shared-dHeidu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="epibFs"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-13-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-13-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-tgqqu",
                                    "isStatic": true,
                                    "lastClassName": "etLKkJ",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-tgqqu",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-13-slug"
                                className="etLKkJ"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </Shared>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={true}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="15"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="15"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="15"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-klkSgg",
                                        "isStatic": false,
                                        "lastClassName": "dQlzPM",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-klkSgg",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle dQlzPM"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={true}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-hWfcJM",
                                "isStatic": false,
                                "lastClassName": "gavHWU",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__DescriptionInputContainer-ieDADT",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-hWfcJM",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={true}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="gavHWU"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="15"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="15"
                                content="Test description, %%replacement_variable%%"
                                fieldId="snippet-editor-field-description"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                placeholder="Modify your meta description by editing it right here"
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="csUbTj"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
            </section>
          </StyledComponent>
        </Shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-buRiHn",
                "isStatic": false,
                "lastClassName": "fBceur",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-buRiHn",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="fBceur"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor highlights the hovered field when onMouseEnter() is called 1`] = `
<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField="description"
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-groBij",
                    "isStatic": true,
                    "lastClassName": "jDjROD",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-groBij",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="jDjROD"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-FQttp",
                                "isStatic": true,
                                "lastClassName": "jrzbNu",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-FQttp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="jrzbNu"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-hJOjYk",
                                      "isStatic": true,
                                      "lastClassName": "kfHzhC",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-bmYqlg",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-hJOjYk",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="kfHzhC"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                            "isStatic": true,
                                            "lastClassName": "iOHwuu",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="iOHwuu"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-hpEpbp",
                                "isStatic": true,
                                "lastClassName": "fFcmtz",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-hpEpbp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="fFcmtz"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                      "isStatic": true,
                                      "lastClassName": "kvZFvD",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-hpEpbp",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="kvZFvD"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-gaTdmv",
                          "isStatic": true,
                          "lastClassName": "hKmbcw",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-gaTdmv",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="hKmbcw"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview-iRyYfE",
                                "isStatic": false,
                                "lastClassName": "kjpOlX",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                  "&::before{display:block;position:absolute;top:-3px;",
                                  [Function],
                                  ":",
                                  [Function],
                                  ";width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "SnippetPreview",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-cXRtpD",
                                "SnippetPreview__MobileDescription-isptHr",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview-iRyYfE",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="kjpOlX"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-isptHr",
                                      "isStatic": false,
                                      "lastClassName": "iupvCD",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-cXRtpD",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="iupvCD"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-cUFsVs",
                  "isStatic": true,
                  "lastClassName": "beFLGL",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-cUFsVs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="beFLGL"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-hAxSQH",
                        "isStatic": false,
                        "lastClassName": "jSeHja",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-hAxSQH",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="jSeHja"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-gJMcOD",
                                "isStatic": false,
                                "lastClassName": "buZSLx",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-gJMcOD",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile buZSLx"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-kMJDzg",
                        "isStatic": false,
                        "lastClassName": "jINwGl",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-kMJDzg",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="jINwGl"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-juRsFk",
                                "isStatic": false,
                                "lastClassName": "hzBRyu",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-juRsFk",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop hzBRyu"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-YkMrD",
                "isStatic": false,
                "lastClassName": "evttQb",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-YkMrD",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="evttQb"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-bNXNlR",
                        "isStatic": false,
                        "lastClassName": "gMvqih",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-bNXNlR",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit gMvqih"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField="description"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <Shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Shared__StyledEditor-kZtWdr",
                  "isStatic": false,
                  "lastClassName": "gqaeOM",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "Shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Shared__StyledEditor-kZtWdr",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="gqaeOM"
            >
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="11"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="11"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="11"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-dKNkzd",
                                        "isStatic": false,
                                        "lastClassName": "kSkBNK",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-dKNkzd",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle kSkBNK"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-ivfuSA",
                                "isStatic": false,
                                "lastClassName": "qXFYk",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__TitleInputContainer-hcRtNW",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-ivfuSA",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="qXFYk"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="11"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="11"
                                content="Test title"
                                fieldId="snippet-editor-field-title"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="kjtizr"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <Shared__SimulatedLabel
                      id="snippet-editor-field-10-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared__SimulatedLabel-elvnSu",
                              "isStatic": true,
                              "lastClassName": "foGqCa",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "Shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-10-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="foGqCa"
                          id="snippet-editor-field-10-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </Shared__SimulatedLabel>
                    <Shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared-dHeidu",
                              "isStatic": false,
                              "lastClassName": "epibFs",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "Shared",
                            "foldedComponentIds": Array [
                              "Shared__InputContainer-hvjUjD",
                            ],
                            "render": [Function],
                            "styledComponentId": "Shared-dHeidu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="epibFs"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-10-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-10-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-tgqqu",
                                    "isStatic": true,
                                    "lastClassName": "etLKkJ",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-tgqqu",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-10-slug"
                                className="etLKkJ"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </Shared>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={true}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="12"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="12"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="12"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-cRNKps",
                                        "isStatic": false,
                                        "lastClassName": "eUBYQO",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-cRNKps",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle eUBYQO"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={true}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-iiRSNg",
                                "isStatic": false,
                                "lastClassName": "eWXKcG",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__DescriptionInputContainer-ieDADT",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-iiRSNg",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={true}
                          onClick={[Function]}
                        >
                          <div
                            className="eWXKcG"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="12"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="12"
                                content="Test description, %%replacement_variable%%"
                                fieldId="snippet-editor-field-description"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                placeholder="Modify your meta description by editing it right here"
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="csUbTj"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
            </section>
          </StyledComponent>
        </Shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-buRiHn",
                "isStatic": false,
                "lastClassName": "fBceur",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-buRiHn",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="fBceur"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor opens when calling open() 1`] = `
<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-groBij",
                    "isStatic": true,
                    "lastClassName": "jDjROD",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-groBij",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="jDjROD"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-FQttp",
                                "isStatic": true,
                                "lastClassName": "jrzbNu",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-FQttp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="jrzbNu"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-hJOjYk",
                                      "isStatic": true,
                                      "lastClassName": "kfHzhC",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-bmYqlg",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-hJOjYk",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="kfHzhC"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                            "isStatic": true,
                                            "lastClassName": "iOHwuu",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="iOHwuu"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-hpEpbp",
                                "isStatic": true,
                                "lastClassName": "fFcmtz",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-hpEpbp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="fFcmtz"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                      "isStatic": true,
                                      "lastClassName": "kvZFvD",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-hpEpbp",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="kvZFvD"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-gaTdmv",
                          "isStatic": true,
                          "lastClassName": "hKmbcw",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-gaTdmv",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="hKmbcw"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-isptHr",
                                "isStatic": false,
                                "lastClassName": "iupvCD",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-cXRtpD",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="iupvCD"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-isptHr",
                                      "isStatic": false,
                                      "lastClassName": "iupvCD",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-cXRtpD",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="iupvCD"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-cUFsVs",
                  "isStatic": true,
                  "lastClassName": "beFLGL",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-cUFsVs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="beFLGL"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-hAxSQH",
                        "isStatic": false,
                        "lastClassName": "jSeHja",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-hAxSQH",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="jSeHja"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-jhhiES",
                                "isStatic": false,
                                "lastClassName": "jakekg",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-jhhiES",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile jakekg"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-kMJDzg",
                        "isStatic": false,
                        "lastClassName": "jINwGl",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-kMJDzg",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="jINwGl"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-drAqND",
                                "isStatic": false,
                                "lastClassName": "MjMfC",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-drAqND",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop MjMfC"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-YkMrD",
                "isStatic": false,
                "lastClassName": "evttQb",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-YkMrD",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="evttQb"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-LLXuw",
                        "isStatic": false,
                        "lastClassName": "CpcGi",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-LLXuw",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit CpcGi"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <Shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Shared__StyledEditor-kZtWdr",
                  "isStatic": false,
                  "lastClassName": "gqaeOM",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "Shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Shared__StyledEditor-kZtWdr",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="gqaeOM"
            >
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="5"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="5"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="5"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-fXLhro",
                                        "isStatic": false,
                                        "lastClassName": "cRhtHb",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-fXLhro",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle cRhtHb"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-egcYMU",
                                "isStatic": false,
                                "lastClassName": "XOcjj",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__TitleInputContainer-hcRtNW",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-egcYMU",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="XOcjj"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="5"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="5"
                                content="Test title"
                                fieldId="snippet-editor-field-title"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="kjtizr"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <Shared__SimulatedLabel
                      id="snippet-editor-field-4-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared__SimulatedLabel-elvnSu",
                              "isStatic": true,
                              "lastClassName": "foGqCa",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "Shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-4-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="foGqCa"
                          id="snippet-editor-field-4-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </Shared__SimulatedLabel>
                    <Shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared-dHeidu",
                              "isStatic": false,
                              "lastClassName": "epibFs",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "Shared",
                            "foldedComponentIds": Array [
                              "Shared__InputContainer-hvjUjD",
                            ],
                            "render": [Function],
                            "styledComponentId": "Shared-dHeidu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="epibFs"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-4-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-4-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-tgqqu",
                                    "isStatic": true,
                                    "lastClassName": "etLKkJ",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-tgqqu",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-4-slug"
                                className="etLKkJ"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </Shared>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="6"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="6"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="6"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-cfRVbn",
                                        "isStatic": false,
                                        "lastClassName": "jsKwhE",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-cfRVbn",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle jsKwhE"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-fhgLdC",
                                "isStatic": false,
                                "lastClassName": "cBcHJU",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__DescriptionInputContainer-ieDADT",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-fhgLdC",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="cBcHJU"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="6"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="6"
                                content="Test description, %%replacement_variable%%"
                                fieldId="snippet-editor-field-description"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                placeholder="Modify your meta description by editing it right here"
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="csUbTj"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
            </section>
          </StyledComponent>
        </Shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-buRiHn",
                "isStatic": false,
                "lastClassName": "fBceur",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-buRiHn",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="fBceur"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor passes replacement variables to the title and description editor 1`] = `
<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={
    Array [
      Object {
        "name": "title",
        "value": "Title!!!",
      },
      Object {
        "name": "excerpt",
        "value": "Excerpt!!!",
      },
    ]
  }
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-groBij",
                    "isStatic": true,
                    "lastClassName": "jDjROD",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-groBij",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="jDjROD"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-FQttp",
                                "isStatic": true,
                                "lastClassName": "jrzbNu",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-FQttp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="jrzbNu"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-hJOjYk",
                                      "isStatic": true,
                                      "lastClassName": "kfHzhC",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-bmYqlg",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-hJOjYk",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="kfHzhC"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                            "isStatic": true,
                                            "lastClassName": "iOHwuu",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="iOHwuu"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-hpEpbp",
                                "isStatic": true,
                                "lastClassName": "fFcmtz",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-hpEpbp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="fFcmtz"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                      "isStatic": true,
                                      "lastClassName": "kvZFvD",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-hpEpbp",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="kvZFvD"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-gaTdmv",
                          "isStatic": true,
                          "lastClassName": "hKmbcw",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-gaTdmv",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="hKmbcw"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-isptHr",
                                "isStatic": false,
                                "lastClassName": "iupvCD",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-cXRtpD",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="iupvCD"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-isptHr",
                                      "isStatic": false,
                                      "lastClassName": "iupvCD",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-cXRtpD",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="iupvCD"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-cUFsVs",
                  "isStatic": true,
                  "lastClassName": "beFLGL",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-cUFsVs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="beFLGL"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-hAxSQH",
                        "isStatic": false,
                        "lastClassName": "jSeHja",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-hAxSQH",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="jSeHja"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-gAWpHG",
                                "isStatic": false,
                                "lastClassName": "fttkXn",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-gAWpHG",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile fttkXn"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-kMJDzg",
                        "isStatic": false,
                        "lastClassName": "jINwGl",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-kMJDzg",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="jINwGl"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-fhMFxk",
                                "isStatic": false,
                                "lastClassName": "bhpRIw",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-fhMFxk",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop bhpRIw"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-YkMrD",
                "isStatic": false,
                "lastClassName": "evttQb",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-YkMrD",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="evttQb"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-iIaiRa",
                        "isStatic": false,
                        "lastClassName": "cFsVzJ",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-iIaiRa",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit cFsVzJ"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={
          Array [
            Object {
              "name": "title",
              "value": "Title!!!",
            },
            Object {
              "name": "excerpt",
              "value": "Excerpt!!!",
            },
          ]
        }
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <Shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Shared__StyledEditor-kZtWdr",
                  "isStatic": false,
                  "lastClassName": "gqaeOM",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "Shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Shared__StyledEditor-kZtWdr",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="gqaeOM"
            >
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={
                        Array [
                          Object {
                            "name": "title",
                            "value": "Title!!!",
                          },
                          Object {
                            "name": "excerpt",
                            "value": "Excerpt!!!",
                          },
                        ]
                      }
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="23"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="23"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="23"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-eEnVin",
                                        "isStatic": false,
                                        "lastClassName": "iHWXCW",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-eEnVin",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle iHWXCW"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-eqpzrG",
                                "isStatic": false,
                                "lastClassName": "inZjHZ",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__TitleInputContainer-hcRtNW",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-eqpzrG",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="inZjHZ"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="23"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={
                                Array [
                                  Object {
                                    "name": "title",
                                    "value": "Title!!!",
                                  },
                                  Object {
                                    "name": "excerpt",
                                    "value": "Excerpt!!!",
                                  },
                                ]
                              }
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="23"
                                content="Test title"
                                fieldId="snippet-editor-field-title"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                recommendedReplacementVariables={Array []}
                                replacementVariables={
                                  Array [
                                    Object {
                                      "name": "title",
                                      "value": "Title!!!",
                                    },
                                    Object {
                                      "name": "excerpt",
                                      "value": "Excerpt!!!",
                                    },
                                  ]
                                }
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="kjtizr"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <Shared__SimulatedLabel
                      id="snippet-editor-field-22-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared__SimulatedLabel-elvnSu",
                              "isStatic": true,
                              "lastClassName": "foGqCa",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "Shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-22-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="foGqCa"
                          id="snippet-editor-field-22-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </Shared__SimulatedLabel>
                    <Shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared-dHeidu",
                              "isStatic": false,
                              "lastClassName": "epibFs",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "Shared",
                            "foldedComponentIds": Array [
                              "Shared__InputContainer-hvjUjD",
                            ],
                            "render": [Function],
                            "styledComponentId": "Shared-dHeidu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="epibFs"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-22-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-22-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-tgqqu",
                                    "isStatic": true,
                                    "lastClassName": "etLKkJ",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-tgqqu",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-22-slug"
                                className="etLKkJ"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </Shared>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={
                        Array [
                          Object {
                            "name": "title",
                            "value": "Title!!!",
                          },
                          Object {
                            "name": "excerpt",
                            "value": "Excerpt!!!",
                          },
                        ]
                      }
                      type="description"
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="24"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="24"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="24"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-lapbLF",
                                        "isStatic": false,
                                        "lastClassName": "kQTEii",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-lapbLF",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle kQTEii"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-jPxdKX",
                                "isStatic": false,
                                "lastClassName": "gleiaC",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__DescriptionInputContainer-ieDADT",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-jPxdKX",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="gleiaC"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="24"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={
                                Array [
                                  Object {
                                    "name": "title",
                                    "value": "Title!!!",
                                  },
                                  Object {
                                    "name": "excerpt",
                                    "value": "Excerpt!!!",
                                  },
                                ]
                              }
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="24"
                                content="Test description, %%replacement_variable%%"
                                fieldId="snippet-editor-field-description"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                placeholder="Modify your meta description by editing it right here"
                                recommendedReplacementVariables={Array []}
                                replacementVariables={
                                  Array [
                                    Object {
                                      "name": "title",
                                      "value": "Title!!!",
                                    },
                                    Object {
                                      "name": "excerpt",
                                      "value": "Excerpt!!!",
                                    },
                                  ]
                                }
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="csUbTj"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
            </section>
          </StyledComponent>
        </Shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-buRiHn",
                "isStatic": false,
                "lastClassName": "fBceur",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-buRiHn",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="fBceur"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor passes the date prop 1`] = `
<div>
  <section>
    <div
      className="jDjROD"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="kEjIkz"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="jrzbNu"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="kfHzhC"
          >
            <span
              className="iOHwuu"
            >
              Test title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="fFcmtz"
        >
          <div
            className="kvZFvD"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            example.org â€º test-slug
          </div>
        </div>
      </div>
      <hr
        className="hKmbcw"
      />
      <div
        className="kEjIkz"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="iupvCD"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="iupvCD"
          >
            <span
              className="dSewZv"
            >
              date string
               - 
            </span>
            Test description, %%replacement_variable%%
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="beFLGL"
  >
    <button
      aria-pressed={true}
      className="jSeHja"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile bRlAok"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="jINwGl"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop fDmmNi"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="evttQb"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit bztgdi"
      fill="currentColor"
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    Edit snippet
  </button>
</div>
`;

exports[`SnippetEditor removes the highlight from the hovered field on calling onMouseLeave() 1`] = `
<ErrorBoundary>
  <div>
    <SnippetPreview
      activeField={null}
      breadcrumbs={null}
      date=""
      description="Test description, %%replacement_variable%%"
      hoveredField={null}
      isAmp={false}
      keyword=""
      locale="en"
      mode="mobile"
      onHover={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      title="Test title"
      url="example.org/test-slug"
      wordsToHighlight={Array []}
    />
    <ModeSwitcher
      active="mobile"
      onChange={[Function]}
    />
    <SnippetEditor__EditSnippetButton
      activeBackgroundColor="#f7f7f7"
      activeBorderColor="#888"
      activeColor="#000"
      aria-expanded={true}
      backgroundColor="#f7f7f7"
      borderColor="#ccc"
      boxShadowColor="#ccc"
      focusBackgroundColor="#fff"
      focusBorderColor="#0066cd"
      focusColor="#000"
      hoverBackgroundColor="#fff"
      hoverBorderColor="#888"
      hoverColor="#000"
      onClick={[Function]}
      textColor="#555"
      type="button"
    >
      <SvgIcon
        color="currentColor"
        icon="edit"
        size="16px"
      />
      Edit snippet
    </SnippetEditor__EditSnippetButton>
    <SnippetEditorFields
      activeField={null}
      containerPadding="0 20px"
      data={
        Object {
          "description": "Test description, %%replacement_variable%%",
          "slug": "test-slug",
          "title": "Test title",
        }
      }
      descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
      descriptionLengthProgress={
        Object {
          "actual": 42,
          "max": 156,
          "score": 6,
        }
      }
      hoveredField={null}
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      recommendedReplacementVariables={Array []}
      replacementVariables={Array []}
      titleLengthProgress={
        Object {
          "actual": 0,
          "max": 600,
          "score": 1,
        }
      }
    />
    <SnippetEditor__CloseEditorButton
      activeBackgroundColor="#f7f7f7"
      activeBorderColor="#888"
      activeColor="#000"
      backgroundColor="#f7f7f7"
      borderColor="#ccc"
      boxShadowColor="#ccc"
      focusBackgroundColor="#fff"
      focusBorderColor="#0066cd"
      focusColor="#000"
      hoverBackgroundColor="#fff"
      hoverBorderColor="#888"
      hoverColor="#000"
      onClick={[Function]}
      textColor="#555"
      type="button"
    >
      Close snippet editor
    </SnippetEditor__CloseEditorButton>
  </div>
</ErrorBoundary>
`;

exports[`SnippetEditor removes the highlight when calling unsetFieldFocus 1`] = `
<SnippetEditor
  baseUrl="http://example.org/"
  data={
    Object {
      "description": "Test description, %%replacement_variable%%",
      "slug": "test-slug",
      "title": "Test title",
    }
  }
  date=""
  descriptionEditorFieldPlaceholder=""
  descriptionLengthProgress={
    Object {
      "actual": 0,
      "max": 156,
      "score": 0,
    }
  }
  hasPaperStyle={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "textComponent": "span",
    }
  }
  locale="en"
  mapEditorDataToPreview={null}
  mode="mobile"
  onChange={[MockFunction]}
  onChangeAnalysisData={[Function]}
  recommendedReplacementVariables={Array []}
  replacementVariables={Array []}
  showCloseButton={true}
  titleLengthProgress={
    Object {
      "actual": 0,
      "max": 600,
      "score": 0,
    }
  }
  wordsToHighlight={Array []}
>
  <ErrorBoundary>
    <div>
      <SnippetPreview
        activeField={null}
        breadcrumbs={null}
        date=""
        description="Test description, %%replacement_variable%%"
        hoveredField={null}
        isAmp={false}
        keyword=""
        locale="en"
        mode="mobile"
        onHover={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        title="Test title"
        url="example.org/test-slug"
        wordsToHighlight={Array []}
      >
        <section>
          <SnippetPreview__MobileContainer
            padding={20}
            width={640}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SnippetPreview__MobileContainer-groBij",
                    "isStatic": true,
                    "lastClassName": "jDjROD",
                    "rules": Array [
                      "border-bottom:1px hidden #fff;border-radius:2px;box-shadow:0 1px 2px rgba(0,0,0,.2);font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;max-width:",
                      "600",
                      "px;box-sizing:border-box;font-size:14px;",
                    ],
                  },
                  "displayName": "SnippetPreview__MobileContainer",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SnippetPreview__MobileContainer-groBij",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              padding={20}
              width={640}
            >
              <div
                className="jDjROD"
                width={640}
              >
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          SEO title preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseTitle
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseTitle-FQttp",
                                "isStatic": true,
                                "lastClassName": "jrzbNu",
                                "rules": Array [
                                  "cursor:pointer;position:relative;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseTitle",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseTitle-FQttp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="jrzbNu"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__TitleBounded>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__TitleBounded-hJOjYk",
                                      "isStatic": true,
                                      "lastClassName": "kfHzhC",
                                      "rules": Array [
                                        "color:",
                                        "#1e0fbe",
                                        ";text-decoration:none;font-size:18px;line-height:1.2;font-weight:normal;margin:0;display:inline-block;overflow:hidden;max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                        "max-width:",
                                        "600",
                                        "px;vertical-align:top;text-overflow:ellipsis;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__TitleBounded",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__Title-bmYqlg",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__TitleBounded-hJOjYk",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="kfHzhC"
                                >
                                  <SnippetPreview__TitleUnboundedMobile>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                            "isStatic": true,
                                            "lastClassName": "iOHwuu",
                                            "rules": Array [
                                              "display:inline-block;font-size:16px;line-height:1.2em;max-height:2.4em;overflow:hidden;text-overflow:ellipsis;",
                                            ],
                                          },
                                          "displayName": "SnippetPreview__TitleUnboundedMobile",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "SnippetPreview__TitleUnboundedMobile-ksdgSY",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={[Function]}
                                    >
                                      <span
                                        className="iOHwuu"
                                      >
                                        Test title
                                      </span>
                                    </StyledComponent>
                                  </SnippetPreview__TitleUnboundedMobile>
                                </div>
                              </StyledComponent>
                            </SnippetPreview__TitleBounded>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseTitle>
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Url preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__BaseUrl>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__BaseUrl-hpEpbp",
                                "isStatic": true,
                                "lastClassName": "fFcmtz",
                                "rules": Array [
                                  "display:inline-block;color:",
                                  "#006621",
                                  ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                ],
                              },
                              "displayName": "SnippetPreview__BaseUrl",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__BaseUrl-hpEpbp",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="fFcmtz"
                          >
                            <SnippetPreview__BaseUrlOverflowContainer
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                      "isStatic": true,
                                      "lastClassName": "kvZFvD",
                                      "rules": Array [
                                        "display:inline-block;color:",
                                        "#006621",
                                        ";cursor:pointer;position:relative;max-width:90%;white-space:nowrap;font-size:14px;",
                                        "overflow:hidden;text-overflow:ellipsis;max-width:100%;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__BaseUrlOverflowContainer",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__BaseUrl-hpEpbp",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__BaseUrlOverflowContainer-dklulZ",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <div
                                  className="kvZFvD"
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  example.org â€º test-slug
                                </div>
                              </StyledComponent>
                            </SnippetPreview__BaseUrlOverflowContainer>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__BaseUrl>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
                <SnippetPreview__Separator>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__Separator-gaTdmv",
                          "isStatic": true,
                          "lastClassName": "hKmbcw",
                          "rules": Array [
                            "border:0;border-bottom:1px solid #DFE1E5;margin:0;",
                          ],
                        },
                        "displayName": "SnippetPreview__Separator",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__Separator-gaTdmv",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="hKmbcw"
                    />
                  </StyledComponent>
                </SnippetPreview__Separator>
                <SnippetPreview__MobilePartContainer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                          "isStatic": true,
                          "lastClassName": "kEjIkz",
                          "rules": Array [
                            "padding:8px 16px;",
                          ],
                        },
                        "displayName": "SnippetPreview__MobilePartContainer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "SnippetPreview__MobilePartContainer-hEQCgH",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="kEjIkz"
                    >
                      <ScreenReaderText>
                        <span
                          className="screen-reader-text"
                          style={
                            Object {
                              "clip": "rect(1px, 1px, 1px, 1px)",
                              "height": "1px",
                              "overflow": "hidden",
                              "position": "absolute",
                              "width": "1px",
                            }
                          }
                        >
                          Meta description preview:
                        </span>
                      </ScreenReaderText>
                      <SnippetPreview__MobileDescription
                        isDescriptionPlaceholder={false}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SnippetPreview__MobileDescription-isptHr",
                                "isStatic": false,
                                "lastClassName": "iupvCD",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";cursor:pointer;position:relative;max-width:",
                                  "600",
                                  "px;font-size:13px;",
                                  "font-size:14px;line-height:20px;",
                                ],
                              },
                              "displayName": "SnippetPreview__MobileDescription",
                              "foldedComponentIds": Array [
                                "SnippetPreview__DesktopDescription-cXRtpD",
                              ],
                              "render": [Function],
                              "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isDescriptionPlaceholder={false}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <div
                            className="iupvCD"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                          >
                            <SnippetPreview__MobileDescription
                              isDescriptionPlaceholder={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "SnippetPreview__MobileDescription-isptHr",
                                      "isStatic": false,
                                      "lastClassName": "iupvCD",
                                      "rules": Array [
                                        "color:",
                                        [Function],
                                        ";cursor:pointer;position:relative;max-width:",
                                        "600",
                                        "px;font-size:13px;",
                                        "font-size:14px;line-height:20px;",
                                      ],
                                    },
                                    "displayName": "SnippetPreview__MobileDescription",
                                    "foldedComponentIds": Array [
                                      "SnippetPreview__DesktopDescription-cXRtpD",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "SnippetPreview__MobileDescription-isptHr",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={[Function]}
                                isDescriptionPlaceholder={false}
                              >
                                <div
                                  className="iupvCD"
                                >
                                  Test description, %%replacement_variable%%
                                </div>
                              </StyledComponent>
                            </SnippetPreview__MobileDescription>
                          </div>
                        </StyledComponent>
                      </SnippetPreview__MobileDescription>
                    </div>
                  </StyledComponent>
                </SnippetPreview__MobilePartContainer>
              </div>
            </StyledComponent>
          </SnippetPreview__MobileContainer>
        </section>
      </SnippetPreview>
      <ModeSwitcher
        active="mobile"
        onChange={[Function]}
      >
        <ModeSwitcher__Switcher>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "ModeSwitcher__Switcher-cUFsVs",
                  "isStatic": true,
                  "lastClassName": "beFLGL",
                  "rules": Array [
                    "display:inline-block;margin-top:10px;border:1px solid #dbdbdb;border-radius:4px;background-color:#f7f7f7;vertical-align:top;",
                  ],
                },
                "displayName": "ModeSwitcher__Switcher",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "ModeSwitcher__Switcher-cUFsVs",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="beFLGL"
            >
              <ModeSwitcher__MobileButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={true}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={true}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={true}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__MobileButton-hAxSQH",
                        "isStatic": false,
                        "lastClassName": "jSeHja",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:3px 0 0 3px;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__MobileButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__MobileButton-hAxSQH",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={true}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={true}
                    className="jSeHja"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="mobile"
                      size="22px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-mobile"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="22px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-mobile"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-feqGEl",
                                "isStatic": false,
                                "lastClassName": "bLPDns",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-feqGEl",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="22px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-mobile bLPDns"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="22px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Mobile preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__MobileButton>
              <ModeSwitcher__DesktopButton
                activeBackgroundColor="#f7f7f7"
                activeBorderColor="#888"
                activeColor="#000"
                aria-pressed={false}
                backgroundColor="#f7f7f7"
                borderColor="#ccc"
                boxShadowColor="#ccc"
                focusBackgroundColor="#fff"
                focusBorderColor="#0066cd"
                focusColor="#000"
                hoverBackgroundColor="#fff"
                hoverBorderColor="#888"
                hoverColor="#000"
                isActive={false}
                onClick={[Function]}
                textColor="#555"
                type="button"
              >
                <StyledComponent
                  activeBackgroundColor="#f7f7f7"
                  activeBorderColor="#888"
                  activeColor="#000"
                  aria-pressed={false}
                  backgroundColor="#f7f7f7"
                  borderColor="#ccc"
                  boxShadowColor="#ccc"
                  focusBackgroundColor="#fff"
                  focusBorderColor="#0066cd"
                  focusColor="#000"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "ModeSwitcher__DesktopButton-kMJDzg",
                        "isStatic": false,
                        "lastClassName": "jINwGl",
                        "rules": Array [
                          "color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";background:",
                          [Function],
                          ";box-shadow:0 1px 0 ",
                          [Function],
                          ";",
                          "&:active{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";box-shadow:inset 0 2px 5px -3px ",
                          "rgba( 0, 0, 0, 0.5 )",
                          ";}",
                          "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                          [Function],
                          ";color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";box-shadow:0 0 3px ",
                          "rgba( 8, 74, 103, 0.8 )",
                          ";}",
                          "&:hover{color:",
                          [Function],
                          ";background-color:",
                          [Function],
                          ";border-color:",
                          [Function],
                          ";}",
                          "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                          "1px",
                          ";border-style:solid;margin:0;padding:",
                          "4px",
                          " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                          [Function],
                          ";overflow:visible;min-height:",
                          "32px",
                          ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                          "22px",
                          ";}}",
                          "font-size:0.8rem;",
                          "border:none;border-bottom:4px solid transparent;width:31px;height:31px;border-color:",
                          [Function],
                          ";color:",
                          "#555",
                          ";transition:0.15s color ease-in-out,0.15s background-color ease-in-out,0.15s border-color ease-in-out;transition-property:border-color;&:hover,&:focus{background-color:",
                          "#fff",
                          ";border:none;border-bottom:4px solid transparent;border-color:",
                          "#1e8cbe",
                          ";color:",
                          "#1e8cbe",
                          ";box-shadow:none;}",
                          "border-radius:0 3px 3px 0;",
                        ],
                      },
                      "defaultProps": Object {
                        "activeBackgroundColor": "#f7f7f7",
                        "activeBorderColor": "#888",
                        "activeColor": "#000",
                        "backgroundColor": "#f7f7f7",
                        "borderColor": "#ccc",
                        "boxShadowColor": "#ccc",
                        "focusBackgroundColor": "#fff",
                        "focusBorderColor": "#0066cd",
                        "focusColor": "#000",
                        "hoverBackgroundColor": "#fff",
                        "hoverBorderColor": "#888",
                        "hoverColor": "#000",
                        "textColor": "#555",
                        "type": "button",
                      },
                      "displayName": "ModeSwitcher__DesktopButton",
                      "foldedComponentIds": Array [
                        "Button__BaseButton-jXgMFB",
                        "Button-hYXUXp",
                        "Button-jiBmQ",
                        "Button-dYVdnu",
                        "Button-ffylkn",
                        "Button-cmHqWe",
                        "ModeSwitcher__SwitcherButton-gWcxIi",
                      ],
                      "propTypes": Object {
                        "activeBackgroundColor": [Function],
                        "activeBorderColor": [Function],
                        "activeColor": [Function],
                        "backgroundColor": [Function],
                        "borderColor": [Function],
                        "boxShadowColor": [Function],
                        "focusBackgroundColor": [Function],
                        "focusBorderColor": [Function],
                        "focusColor": [Function],
                        "hoverBackgroundColor": [Function],
                        "hoverBorderColor": [Function],
                        "hoverColor": [Function],
                        "textColor": [Function],
                        "type": [Function],
                      },
                      "render": [Function],
                      "styledComponentId": "ModeSwitcher__DesktopButton-kMJDzg",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hoverBackgroundColor="#fff"
                  hoverBorderColor="#888"
                  hoverColor="#000"
                  isActive={false}
                  onClick={[Function]}
                  textColor="#555"
                  type="button"
                >
                  <button
                    aria-pressed={false}
                    className="jINwGl"
                    onClick={[Function]}
                    type="button"
                  >
                    <SvgIcon
                      color="currentColor"
                      icon="desktop"
                      size="18px"
                    >
                      <SvgIcon__StyledSvg
                        aria-hidden={true}
                        className="yoast-svg-icon yoast-svg-icon-desktop"
                        fill="currentColor"
                        focusable="false"
                        role="img"
                        size="18px"
                        viewBox="0 0 1792 1792"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <StyledComponent
                          aria-hidden={true}
                          className="yoast-svg-icon yoast-svg-icon-desktop"
                          fill="currentColor"
                          focusable="false"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "SvgIcon__StyledSvg-kOhrkG",
                                "isStatic": false,
                                "lastClassName": "exudEX",
                                "rules": Array [
                                  "width:",
                                  [Function],
                                  ";height:",
                                  [Function],
                                  ";flex:none;",
                                ],
                              },
                              "displayName": "SvgIcon__StyledSvg",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "SvgIcon__StyledSvg-kOhrkG",
                              "target": "svg",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          role="img"
                          size="18px"
                          viewBox="0 0 1792 1792"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <svg
                            aria-hidden={true}
                            className="yoast-svg-icon yoast-svg-icon-desktop exudEX"
                            fill="currentColor"
                            focusable="false"
                            role="img"
                            size="18px"
                            viewBox="0 0 1792 1792"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
                            />
                          </svg>
                        </StyledComponent>
                      </SvgIcon__StyledSvg>
                    </SvgIcon>
                    <ScreenReaderText>
                      <span
                        className="screen-reader-text"
                        style={
                          Object {
                            "clip": "rect(1px, 1px, 1px, 1px)",
                            "height": "1px",
                            "overflow": "hidden",
                            "position": "absolute",
                            "width": "1px",
                          }
                        }
                      >
                        Desktop preview
                      </span>
                    </ScreenReaderText>
                  </button>
                </StyledComponent>
              </ModeSwitcher__DesktopButton>
            </div>
          </StyledComponent>
        </ModeSwitcher__Switcher>
      </ModeSwitcher>
      <SnippetEditor__EditSnippetButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        aria-expanded={true}
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          aria-expanded={true}
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__EditSnippetButton-YkMrD",
                "isStatic": false,
                "lastClassName": "evttQb",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin:",
                  [Function],
                  ";fill:",
                  "#555",
                  ";padding-left:8px;& svg{",
                  [Function],
                  ":7px;}",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__EditSnippetButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__EditSnippetButton-YkMrD",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={[Function]}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            aria-expanded={true}
            className="evttQb"
            onClick={[Function]}
            type="button"
          >
            <SvgIcon
              color="currentColor"
              icon="edit"
              size="16px"
            >
              <SvgIcon__StyledSvg
                aria-hidden={true}
                className="yoast-svg-icon yoast-svg-icon-edit"
                fill="currentColor"
                focusable="false"
                role="img"
                size="16px"
                viewBox="0 0 1792 1792"
                xmlns="http://www.w3.org/2000/svg"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="yoast-svg-icon yoast-svg-icon-edit"
                  fill="currentColor"
                  focusable="false"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "SvgIcon__StyledSvg-esHkuc",
                        "isStatic": false,
                        "lastClassName": "ZXPqd",
                        "rules": Array [
                          "width:",
                          [Function],
                          ";height:",
                          [Function],
                          ";flex:none;",
                        ],
                      },
                      "displayName": "SvgIcon__StyledSvg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "SvgIcon__StyledSvg-esHkuc",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  role="img"
                  size="16px"
                  viewBox="0 0 1792 1792"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    aria-hidden={true}
                    className="yoast-svg-icon yoast-svg-icon-edit ZXPqd"
                    fill="currentColor"
                    focusable="false"
                    role="img"
                    size="16px"
                    viewBox="0 0 1792 1792"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
                    />
                  </svg>
                </StyledComponent>
              </SvgIcon__StyledSvg>
            </SvgIcon>
            Edit snippet
          </button>
        </StyledComponent>
      </SnippetEditor__EditSnippetButton>
      <SnippetEditorFields
        activeField={null}
        containerPadding="0 20px"
        data={
          Object {
            "description": "Test description, %%replacement_variable%%",
            "slug": "test-slug",
            "title": "Test title",
          }
        }
        descriptionEditorFieldPlaceholder="Modify your meta description by editing it right here"
        descriptionLengthProgress={
          Object {
            "actual": 42,
            "max": 156,
            "score": 6,
          }
        }
        hoveredField={null}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        recommendedReplacementVariables={Array []}
        replacementVariables={Array []}
        titleLengthProgress={
          Object {
            "actual": 0,
            "max": 600,
            "score": 1,
          }
        }
      >
        <Shared__StyledEditor
          padding="0 20px"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Shared__StyledEditor-kZtWdr",
                  "isStatic": false,
                  "lastClassName": "gqaeOM",
                  "rules": Array [
                    "padding:",
                    [Function],
                    ";",
                  ],
                },
                "displayName": "Shared__StyledEditor",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Shared__StyledEditor-kZtWdr",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            padding="0 20px"
          >
            <section
              className="gqaeOM"
            >
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test title"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-title"
                      isActive={false}
                      isHovered={false}
                      label="SEO title"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="17"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="17"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="17"
                            onClick={[Function]}
                          >
                            SEO title
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-ezsRss",
                                        "isStatic": false,
                                        "lastClassName": "jQQNnO",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-ezsRss",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle jQQNnO"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-gVRCLx",
                                "isStatic": false,
                                "lastClassName": "iLdjIC",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  ".public-DraftStyleDefault-block{line-height:24px;}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__TitleInputContainer-hcRtNW",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-gVRCLx",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="iLdjIC"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="17"
                              content="Test title"
                              fieldId="snippet-editor-field-title"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="17"
                                content="Test title"
                                fieldId="snippet-editor-field-title"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={600}
                      progressColor="#dc3232"
                      value={0}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={600}
                        progressColor="#dc3232"
                        value={0}
                      >
                        <progress
                          aria-hidden="true"
                          className="kjtizr"
                          max={600}
                          value={0}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <Shared__SimulatedLabel
                      id="snippet-editor-field-16-slug"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared__SimulatedLabel-elvnSu",
                              "isStatic": true,
                              "lastClassName": "foGqCa",
                              "rules": Array [
                                "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                              ],
                            },
                            "displayName": "Shared__SimulatedLabel",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="snippet-editor-field-16-slug"
                        onClick={[Function]}
                      >
                        <div
                          className="foGqCa"
                          id="snippet-editor-field-16-slug"
                          onClick={[Function]}
                        >
                          Slug
                        </div>
                      </StyledComponent>
                    </Shared__SimulatedLabel>
                    <Shared
                      isActive={false}
                      isHovered={false}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {},
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "Shared-dHeidu",
                              "isStatic": false,
                              "lastClassName": "epibFs",
                              "rules": Array [
                                "flex:0 1 100%;border:1px solid ",
                                [Function],
                                ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                [Function],
                                ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                "&::before{display:block;position:absolute;top:-1px;",
                                [Function],
                                ":-25px;width:24px;height:24px;background-image:url( ",
                                [Function],
                                " );background-size:25px;content:\\"\\";}",
                              ],
                            },
                            "displayName": "Shared",
                            "foldedComponentIds": Array [
                              "Shared__InputContainer-hvjUjD",
                            ],
                            "render": [Function],
                            "styledComponentId": "Shared-dHeidu",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <div
                          className="epibFs"
                          onClick={[Function]}
                        >
                          <SnippetEditorFields__SlugInput
                            aria-labelledby="snippet-editor-field-16-slug"
                            id="snippet-editor-field-slug"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            value="test-slug"
                          >
                            <StyledComponent
                              aria-labelledby="snippet-editor-field-16-slug"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "SnippetEditorFields__SlugInput-tgqqu",
                                    "isStatic": true,
                                    "lastClassName": "etLKkJ",
                                    "rules": Array [
                                      "border:none;width:100%;height:inherit;line-height:inherit;font-family:inherit;font-size:inherit;color:inherit;&:focus{outline:0;}",
                                    ],
                                  },
                                  "displayName": "SnippetEditorFields__SlugInput",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "SnippetEditorFields__SlugInput-tgqqu",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              id="snippet-editor-field-slug"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value="test-slug"
                            >
                              <input
                                aria-labelledby="snippet-editor-field-16-slug"
                                className="etLKkJ"
                                id="snippet-editor-field-slug"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value="test-slug"
                              />
                            </StyledComponent>
                          </SnippetEditorFields__SlugInput>
                        </div>
                      </StyledComponent>
                    </Shared>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
              <Shared__FormSection>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Shared__FormSection-jqYCLL",
                        "isStatic": true,
                        "lastClassName": "gwsSWe",
                        "rules": Array [
                          "display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:24px 0 0 0;",
                        ],
                      },
                      "displayName": "Shared__FormSection",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Shared__FormSection-jqYCLL",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="gwsSWe"
                  >
                    <ReplacementVariableEditor
                      content="Test description, %%replacement_variable%%"
                      editorRef={[Function]}
                      fieldId="snippet-editor-field-description"
                      isActive={false}
                      isHovered={false}
                      label="Meta description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Modify your meta description by editing it right here"
                      recommendedReplacementVariables={Array []}
                      replacementVariables={Array []}
                      type="description"
                      withCaret={true}
                    >
                      <Shared__SimulatedLabel
                        id="18"
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__SimulatedLabel-elvnSu",
                                "isStatic": true,
                                "lastClassName": "foGqCa",
                                "rules": Array [
                                  "flex:1 1 200px;min-width:200px;cursor:pointer;font-size:16px;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;margin:4px 0;",
                                ],
                              },
                              "displayName": "Shared__SimulatedLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Shared__SimulatedLabel-elvnSu",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="18"
                          onClick={[Function]}
                        >
                          <div
                            className="foGqCa"
                            id="18"
                            onClick={[Function]}
                          >
                            Meta description
                          </div>
                        </StyledComponent>
                      </Shared__SimulatedLabel>
                      <Shared__TriggerReplacementVariableSuggestionsButton
                        activeBackgroundColor="#f7f7f7"
                        activeBorderColor="#888"
                        activeColor="#000"
                        backgroundColor="#f7f7f7"
                        borderColor="#ccc"
                        boxShadowColor="#ccc"
                        focusBackgroundColor="#fff"
                        focusBorderColor="#0066cd"
                        focusColor="#000"
                        hoverBackgroundColor="#fff"
                        hoverBorderColor="#888"
                        hoverColor="#000"
                        onClick={[Function]}
                        textColor="#555"
                        type="button"
                      >
                        <StyledComponent
                          activeBackgroundColor="#f7f7f7"
                          activeBorderColor="#888"
                          activeColor="#000"
                          backgroundColor="#f7f7f7"
                          borderColor="#ccc"
                          boxShadowColor="#ccc"
                          focusBackgroundColor="#fff"
                          focusBorderColor="#0066cd"
                          focusColor="#000"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                                "isStatic": false,
                                "lastClassName": "fkvPaE",
                                "rules": Array [
                                  "color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";background:",
                                  [Function],
                                  ";box-shadow:0 1px 0 ",
                                  [Function],
                                  ";",
                                  "&:active{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";box-shadow:inset 0 2px 5px -3px ",
                                  "rgba( 0, 0, 0, 0.5 )",
                                  ";}",
                                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                                  [Function],
                                  ";color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";box-shadow:0 0 3px ",
                                  "rgba( 8, 74, 103, 0.8 )",
                                  ";}",
                                  "&:hover{color:",
                                  [Function],
                                  ";background-color:",
                                  [Function],
                                  ";border-color:",
                                  [Function],
                                  ";}",
                                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                                  "1px",
                                  ";border-style:solid;margin:0;padding:",
                                  "4px",
                                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                                  [Function],
                                  ";overflow:visible;min-height:",
                                  "32px",
                                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                                  "22px",
                                  ";}}",
                                  "font-size:0.8rem;",
                                  "box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;padding-left:8px;height:33px;border:1px solid #dbdbdb;font-size:13px;& svg{",
                                  [Function],
                                  ":7px;fill:",
                                  "#555",
                                  ";}",
                                ],
                              },
                              "defaultProps": Object {
                                "activeBackgroundColor": "#f7f7f7",
                                "activeBorderColor": "#888",
                                "activeColor": "#000",
                                "backgroundColor": "#f7f7f7",
                                "borderColor": "#ccc",
                                "boxShadowColor": "#ccc",
                                "focusBackgroundColor": "#fff",
                                "focusBorderColor": "#0066cd",
                                "focusColor": "#000",
                                "hoverBackgroundColor": "#fff",
                                "hoverBorderColor": "#888",
                                "hoverColor": "#000",
                                "textColor": "#555",
                                "type": "button",
                              },
                              "displayName": "Shared__TriggerReplacementVariableSuggestionsButton",
                              "foldedComponentIds": Array [
                                "Button__BaseButton-jXgMFB",
                                "Button-hYXUXp",
                                "Button-jiBmQ",
                                "Button-dYVdnu",
                                "Button-ffylkn",
                                "Button-cmHqWe",
                              ],
                              "propTypes": Object {
                                "activeBackgroundColor": [Function],
                                "activeBorderColor": [Function],
                                "activeColor": [Function],
                                "backgroundColor": [Function],
                                "borderColor": [Function],
                                "boxShadowColor": [Function],
                                "focusBackgroundColor": [Function],
                                "focusBorderColor": [Function],
                                "focusColor": [Function],
                                "hoverBackgroundColor": [Function],
                                "hoverBorderColor": [Function],
                                "hoverColor": [Function],
                                "textColor": [Function],
                                "type": [Function],
                              },
                              "render": [Function],
                              "styledComponentId": "Shared__TriggerReplacementVariableSuggestionsButton-hmDnWC",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          hoverBackgroundColor="#fff"
                          hoverBorderColor="#888"
                          hoverColor="#000"
                          onClick={[Function]}
                          textColor="#555"
                          type="button"
                        >
                          <button
                            className="fkvPaE"
                            onClick={[Function]}
                            type="button"
                          >
                            <SvgIcon
                              color="currentColor"
                              icon="plus-circle"
                              size="16px"
                            >
                              <SvgIcon__StyledSvg
                                aria-hidden={true}
                                className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                fill="currentColor"
                                focusable="false"
                                role="img"
                                size="16px"
                                viewBox="0 0 1792 1792"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <StyledComponent
                                  aria-hidden={true}
                                  className="yoast-svg-icon yoast-svg-icon-plus-circle"
                                  fill="currentColor"
                                  focusable="false"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "SvgIcon__StyledSvg-elEYtB",
                                        "isStatic": false,
                                        "lastClassName": "lfuwnW",
                                        "rules": Array [
                                          "width:",
                                          [Function],
                                          ";height:",
                                          [Function],
                                          ";flex:none;",
                                        ],
                                      },
                                      "displayName": "SvgIcon__StyledSvg",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "SvgIcon__StyledSvg-elEYtB",
                                      "target": "svg",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  role="img"
                                  size="16px"
                                  viewBox="0 0 1792 1792"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="yoast-svg-icon yoast-svg-icon-plus-circle lfuwnW"
                                    fill="currentColor"
                                    focusable="false"
                                    role="img"
                                    size="16px"
                                    viewBox="0 0 1792 1792"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
                                    />
                                  </svg>
                                </StyledComponent>
                              </SvgIcon__StyledSvg>
                            </SvgIcon>
                            Insert snippet variable
                          </button>
                        </StyledComponent>
                      </Shared__TriggerReplacementVariableSuggestionsButton>
                      <Shared
                        isActive={false}
                        isHovered={false}
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {},
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "Shared-deklfh",
                                "isStatic": false,
                                "lastClassName": "iJYplQ",
                                "rules": Array [
                                  "flex:0 1 100%;border:1px solid ",
                                  [Function],
                                  ";padding:3px 5px;box-sizing:border-box;box-shadow:",
                                  [Function],
                                  ";background-color:#fff;color:#32373c;outline:0;transition:50ms border-color ease-in-out;position:relative;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;font-size:14px;cursor:text;",
                                  "min-height:72px;padding:2px 6px;line-height:24px;.public-DraftEditorPlaceholder-root{color:",
                                  "#616161",
                                  ";}.public-DraftEditorPlaceholder-hasFocus{color:",
                                  "#616161",
                                  ";}",
                                  "&::before{display:block;position:absolute;top:-1px;",
                                  [Function],
                                  ":-25px;width:24px;height:24px;background-image:url( ",
                                  [Function],
                                  " );background-size:25px;content:\\"\\";}",
                                ],
                              },
                              "displayName": "Shared",
                              "foldedComponentIds": Array [
                                "Shared__InputContainer-hvjUjD",
                                "Shared__DescriptionInputContainer-ieDADT",
                              ],
                              "render": [Function],
                              "styledComponentId": "Shared-deklfh",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          isActive={false}
                          isHovered={false}
                          onClick={[Function]}
                        >
                          <div
                            className="iJYplQ"
                            onClick={[Function]}
                          >
                            <Wrapper
                              ariaLabelledBy="18"
                              content="Test description, %%replacement_variable%%"
                              fieldId="snippet-editor-field-description"
                              innerRef={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Modify your meta description by editing it right here"
                              recommendedReplacementVariables={Array []}
                              replacementVariables={Array []}
                            >
                              <ReplacementVariableEditorStandalone
                                ariaLabelledBy="18"
                                content="Test description, %%replacement_variable%%"
                                fieldId="snippet-editor-field-description"
                                innerRef={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                placeholder="Modify your meta description by editing it right here"
                                recommendedReplacementVariables={Array []}
                                replacementVariables={Array []}
                              >
                                <div />
                              </ReplacementVariableEditorStandalone>
                            </Wrapper>
                          </div>
                        </StyledComponent>
                      </Shared>
                    </ReplacementVariableEditor>
                    <ProgressBar
                      aria-hidden="true"
                      backgroundColor="#f7f7f7"
                      borderColor="#ddd"
                      max={156}
                      progressColor="#ee7c1b"
                      value={42}
                    >
                      <StyledComponent
                        aria-hidden="true"
                        backgroundColor="#f7f7f7"
                        borderColor="#ddd"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ProgressBar-dEgehY",
                              "isStatic": false,
                              "lastClassName": "csUbTj",
                              "rules": Array [
                                "box-sizing:border-box;width:100%;height:8px;display:block;margin-top:8px;appearance:none;background-color:",
                                [Function],
                                ";border:1px solid ",
                                [Function],
                                ";::-webkit-progress-bar{background-color:",
                                [Function],
                                ";}::-webkit-progress-value{background-color:",
                                [Function],
                                ";transition:width 250ms;}::-moz-progress-bar{background-color:",
                                [Function],
                                ";}::-ms-fill{background-color:",
                                [Function],
                                ";border:0;}",
                              ],
                            },
                            "defaultProps": Object {
                              "aria-hidden": "true",
                              "backgroundColor": "#f7f7f7",
                              "borderColor": "#ddd",
                              "max": 1,
                              "progressColor": "#7ad03a",
                              "value": 0,
                            },
                            "displayName": "ProgressBar",
                            "foldedComponentIds": Array [],
                            "propTypes": Object {
                              "aria-hidden": [Function],
                              "backgroundColor": [Function],
                              "borderColor": [Function],
                              "max": [Function],
                              "progressColor": [Function],
                              "value": [Function],
                            },
                            "render": [Function],
                            "styledComponentId": "ProgressBar-dEgehY",
                            "target": "progress",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        max={156}
                        progressColor="#ee7c1b"
                        value={42}
                      >
                        <progress
                          aria-hidden="true"
                          className="csUbTj"
                          max={156}
                          value={42}
                        />
                      </StyledComponent>
                    </ProgressBar>
                  </div>
                </StyledComponent>
              </Shared__FormSection>
            </section>
          </StyledComponent>
        </Shared__StyledEditor>
      </SnippetEditorFields>
      <SnippetEditor__CloseEditorButton
        activeBackgroundColor="#f7f7f7"
        activeBorderColor="#888"
        activeColor="#000"
        backgroundColor="#f7f7f7"
        borderColor="#ccc"
        boxShadowColor="#ccc"
        focusBackgroundColor="#fff"
        focusBorderColor="#0066cd"
        focusColor="#000"
        hoverBackgroundColor="#fff"
        hoverBorderColor="#888"
        hoverColor="#000"
        onClick={[Function]}
        textColor="#555"
        type="button"
      >
        <StyledComponent
          activeBackgroundColor="#f7f7f7"
          activeBorderColor="#888"
          activeColor="#000"
          backgroundColor="#f7f7f7"
          borderColor="#ccc"
          boxShadowColor="#ccc"
          focusBackgroundColor="#fff"
          focusBorderColor="#0066cd"
          focusColor="#000"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "SnippetEditor__CloseEditorButton-buRiHn",
                "isStatic": false,
                "lastClassName": "fBceur",
                "rules": Array [
                  "color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";background:",
                  [Function],
                  ";box-shadow:0 1px 0 ",
                  [Function],
                  ";",
                  "&:active{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";box-shadow:inset 0 2px 5px -3px ",
                  "rgba( 0, 0, 0, 0.5 )",
                  ";}",
                  "&::-moz-focus-inner{border-width:0;}&:focus{outline:none;border-color:",
                  [Function],
                  ";color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";box-shadow:0 0 3px ",
                  "rgba( 8, 74, 103, 0.8 )",
                  ";}",
                  "&:hover{color:",
                  [Function],
                  ";background-color:",
                  [Function],
                  ";border-color:",
                  [Function],
                  ";}",
                  "display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;border-width:",
                  "1px",
                  ";border-style:solid;margin:0;padding:",
                  "4px",
                  " 10px;border-radius:3px;cursor:pointer;box-sizing:border-box;font-size:inherit;font-family:inherit;font-weight:inherit;text-align:",
                  [Function],
                  ";overflow:visible;min-height:",
                  "32px",
                  ";svg{align-self:center;}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){::after{display:inline-block;content:\\"\\";min-height:",
                  "22px",
                  ";}}",
                  "font-size:0.8rem;",
                  "height:33px;border:1px solid #dbdbdb;box-shadow:none;font-family:Arial,Roboto-Regular,HelveticaNeue,sans-serif;",
                  "margin-top:24px;",
                ],
              },
              "defaultProps": Object {
                "activeBackgroundColor": "#f7f7f7",
                "activeBorderColor": "#888",
                "activeColor": "#000",
                "backgroundColor": "#f7f7f7",
                "borderColor": "#ccc",
                "boxShadowColor": "#ccc",
                "focusBackgroundColor": "#fff",
                "focusBorderColor": "#0066cd",
                "focusColor": "#000",
                "hoverBackgroundColor": "#fff",
                "hoverBorderColor": "#888",
                "hoverColor": "#000",
                "textColor": "#555",
                "type": "button",
              },
              "displayName": "SnippetEditor__CloseEditorButton",
              "foldedComponentIds": Array [
                "Button__BaseButton-jXgMFB",
                "Button-hYXUXp",
                "Button-jiBmQ",
                "Button-dYVdnu",
                "Button-ffylkn",
                "Button-cmHqWe",
                "SnippetEditor__SnippetEditorButton-gyFfiJ",
              ],
              "propTypes": Object {
                "activeBackgroundColor": [Function],
                "activeBorderColor": [Function],
                "activeColor": [Function],
                "backgroundColor": [Function],
                "borderColor": [Function],
                "boxShadowColor": [Function],
                "focusBackgroundColor": [Function],
                "focusBorderColor": [Function],
                "focusColor": [Function],
                "hoverBackgroundColor": [Function],
                "hoverBorderColor": [Function],
                "hoverColor": [Function],
                "textColor": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "SnippetEditor__CloseEditorButton-buRiHn",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          hoverBackgroundColor="#fff"
          hoverBorderColor="#888"
          hoverColor="#000"
          onClick={[Function]}
          textColor="#555"
          type="button"
        >
          <button
            className="fBceur"
            onClick={[Function]}
            type="button"
          >
            Close snippet editor
          </button>
        </StyledComponent>
      </SnippetEditor__CloseEditorButton>
    </div>
  </ErrorBoundary>
</SnippetEditor>
`;

exports[`SnippetEditor renders in desktop mode 1`] = `
<div>
  <section>
    <div
      className="ijsBvx bAIFnN"
      width={640}
    >
      <div
        className="iwFfCS"
        width={600}
      >
        <div
          className="cllXGM"
        >
          <span
            className="screen-reader-text"
            style={
              Object {
                "clip": "rect(1px, 1px, 1px, 1px)",
                "height": "1px",
                "overflow": "hidden",
                "position": "absolute",
                "width": "1px",
              }
            }
          >
            SEO title preview:
          </span>
          <div
            className="jrzbNu"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            <div
              className="kfHzhC"
            >
              <span
                className="hTamdh"
              >
                Test title
              </span>
            </div>
          </div>
          <span
            className="screen-reader-text"
            style={
              Object {
                "clip": "rect(1px, 1px, 1px, 1px)",
                "height": "1px",
                "overflow": "hidden",
                "position": "absolute",
                "width": "1px",
              }
            }
          >
            Url preview:
          </span>
          <div
            className="fFcmtz"
          >
            <div
              className="kvZFvD"
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
            >
              example.org/test-slug/
            </div>
          </div>
          <div
            className="bTDJjr"
          />
        </div>
        <div
          className="cllXGM"
        >
          <span
            className="screen-reader-text"
            style={
              Object {
                "clip": "rect(1px, 1px, 1px, 1px)",
                "height": "1px",
                "overflow": "hidden",
                "position": "absolute",
                "width": "1px",
              }
            }
          >
            Meta description preview:
          </span>
          <div
            className="kbuHrI"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            Test description, %%replacement_variable%%
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="beFLGL"
  >
    <button
      aria-pressed={false}
      className="gWBmCI"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile ctKgxE"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={true}
      className="cDTKWI"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop gjYpdN"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="evttQb"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit fxbIln"
      fill="currentColor"
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    Edit snippet
  </button>
</div>
`;

exports[`SnippetEditor renders the snippet editor without a close button when showCloseButton is false 1`] = `
<div>
  <section>
    <div
      className="jDjROD"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="kEjIkz"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="jrzbNu"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="kfHzhC"
          >
            <span
              className="iOHwuu"
            >
              Test title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="fFcmtz"
        >
          <div
            className="kvZFvD"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            example.org â€º test-slug
          </div>
        </div>
      </div>
      <hr
        className="hKmbcw"
      />
      <div
        className="kEjIkz"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="iupvCD"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="iupvCD"
          >
            Test description, %%replacement_variable%%
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="beFLGL"
  >
    <button
      aria-pressed={true}
      className="jSeHja"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile gBCHlo"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="jINwGl"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop gCmZcj"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <section
    className="gqaeOM"
  >
    <div
      className="gwsSWe"
    >
      <div
        className="foGqCa"
        id="2"
        onClick={[Function]}
      >
        SEO title
      </div>
      <button
        className="fkvPaE"
        onClick={[Function]}
        type="button"
      >
        <svg
          aria-hidden={true}
          className="yoast-svg-icon yoast-svg-icon-plus-circle fQlNuL"
          fill="currentColor"
          focusable="false"
          role="img"
          size="16px"
          viewBox="0 0 1792 1792"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
          />
        </svg>
        Insert snippet variable
      </button>
      <div
        className="bjmEgv"
        onClick={[Function]}
      >
        <div />
      </div>
      <progress
        aria-hidden="true"
        className="kjtizr"
        max={600}
        value={0}
      />
    </div>
    <div
      className="gwsSWe"
    >
      <div
        className="foGqCa"
        id="snippet-editor-field-1-slug"
        onClick={[Function]}
      >
        Slug
      </div>
      <div
        className="epibFs"
        onClick={[Function]}
      >
        <input
          aria-labelledby="snippet-editor-field-1-slug"
          className="etLKkJ"
          id="snippet-editor-field-slug"
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          value="test-slug"
        />
      </div>
    </div>
    <div
      className="gwsSWe"
    >
      <div
        className="foGqCa"
        id="3"
        onClick={[Function]}
      >
        Meta description
      </div>
      <button
        className="fkvPaE"
        onClick={[Function]}
        type="button"
      >
        <svg
          aria-hidden={true}
          className="yoast-svg-icon yoast-svg-icon-plus-circle iOMSiq"
          fill="currentColor"
          focusable="false"
          role="img"
          size="16px"
          viewBox="0 0 1792 1792"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M1344 960v-128q0-26-19-45t-45-19h-256v-256q0-26-19-45t-45-19h-128q-26 0-45 19t-19 45v256h-256q-26 0-45 19t-19 45v128q0 26 19 45t45 19h256v256q0 26 19 45t45 19h128q26 0 45-19t19-45v-256h256q26 0 45-19t19-45zm320-64q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"
          />
        </svg>
        Insert snippet variable
      </button>
      <div
        className="hOuBkA"
        onClick={[Function]}
      >
        <div />
      </div>
      <progress
        aria-hidden="true"
        className="csUbTj"
        max={156}
        value={42}
      />
    </div>
  </section>
</div>
`;

exports[`SnippetEditor shows the editor 1`] = `
<div>
  <section>
    <div
      className="jDjROD"
      onMouseLeave={undefined}
      width={640}
    >
      <div
        className="kEjIkz"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          SEO title preview:
        </span>
        <div
          className="jrzbNu"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="kfHzhC"
          >
            <span
              className="iOHwuu"
            >
              Test title
            </span>
          </div>
        </div>
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Url preview:
        </span>
        <div
          className="fFcmtz"
        >
          <div
            className="kvZFvD"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
          >
            example.org â€º test-slug
          </div>
        </div>
      </div>
      <hr
        className="hKmbcw"
      />
      <div
        className="kEjIkz"
      >
        <span
          className="screen-reader-text"
          style={
            Object {
              "clip": "rect(1px, 1px, 1px, 1px)",
              "height": "1px",
              "overflow": "hidden",
              "position": "absolute",
              "width": "1px",
            }
          }
        >
          Meta description preview:
        </span>
        <div
          className="iupvCD"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
        >
          <div
            className="iupvCD"
          >
            Test description, %%replacement_variable%%
          </div>
        </div>
      </div>
    </div>
  </section>
  <div
    className="beFLGL"
  >
    <button
      aria-pressed={true}
      className="jSeHja"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-mobile gJvZrT"
        fill="currentColor"
        focusable="false"
        role="img"
        size="22px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M976 1408q0-33-23.5-56.5t-56.5-23.5-56.5 23.5-23.5 56.5 23.5 56.5 56.5 23.5 56.5-23.5 23.5-56.5zm208-160v-704q0-13-9.5-22.5t-22.5-9.5h-512q-13 0-22.5 9.5t-9.5 22.5v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zm-192-848q0-16-16-16h-160q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-1024q0-52 38-90t90-38h512q52 0 90 38t38 90z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Mobile preview
      </span>
    </button>
    <button
      aria-pressed={false}
      className="jINwGl"
      onClick={[Function]}
      type="button"
    >
      <svg
        aria-hidden={true}
        className="yoast-svg-icon yoast-svg-icon-desktop VPXLM"
        fill="currentColor"
        focusable="false"
        role="img"
        size="18px"
        viewBox="0 0 1792 1792"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M1728 992v-832q0-13-9.5-22.5t-22.5-9.5h-1600q-13 0-22.5 9.5t-9.5 22.5v832q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5zm128-832v1088q0 66-47 113t-113 47h-544q0 37 16 77.5t32 71 16 43.5q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45q0-14 16-44t32-70 16-78h-544q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1600q66 0 113 47t47 113z"
        />
      </svg>
      <span
        className="screen-reader-text"
        style={
          Object {
            "clip": "rect(1px, 1px, 1px, 1px)",
            "height": "1px",
            "overflow": "hidden",
            "position": "absolute",
            "width": "1px",
          }
        }
      >
        Desktop preview
      </span>
    </button>
  </div>
  <button
    aria-expanded={false}
    className="evttQb"
    onClick={[Function]}
    type="button"
  >
    <svg
      aria-hidden={true}
      className="yoast-svg-icon yoast-svg-icon-edit gUUUPG"
      fill="currentColor"
      focusable="false"
      role="img"
      size="16px"
      viewBox="0 0 1792 1792"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z"
      />
    </svg>
    Edit snippet
  </button>
</div>
`;
